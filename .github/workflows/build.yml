name: Build and publish release

on:
  pull_request:
    branches: 
      - main
    types: [closed]
    paths-ignore:
      - "**.md"
      - "**.spec.js"
      - ".idea"
      - ".vscode"
      - ".dockerignore"
      - "Dockerfile"
      - ".gitignore"
      - ".github/**"
      - "!.github/workflows/build.yml"

jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Unshallow repo
        run: git fetch --unshallow --all

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v0.9.7

      - name: Show Version
        run: echo "Release version " ${{ env.GitVersion_SemVer }}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.GitVersion_SemVer }}
          release_name: Release ${{ env.GitVersion_SemVer }}
          draft: false
          prerelease: false

      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt

      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  build:
    name: Build projects by OS
    needs: [release]
    runs-on: ${{ matrix.os }}
    permissions: write-all

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Unshallow repo
        run: git fetch --unshallow --all

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v0.9.7

      - name: Show Version
        run: echo "Build and release version > " ${{ env.GitVersion_SemVer }}

      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url

      - name: Get Upload URL
        id: get_release_info
        run: |
          if [[ "$RUNNER_OS" == "Linux" || "$RUNNER_OS" == "macOS" ]]; then
              value=$(cat release_url/release_url.txt)
              echo "::set-output name=upload_url::$value"
              echo "Release url:"
              cat release_url/release_url.txt
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
              setlocal EnableDelayedExpansion
              value=""
              for /f "usebackq delims=" %%A in ("release_url/release_url.txt") do (
                  set "value=%%A"
              )
              echo "::set-output name=upload_url::!value!"
              echo "Release url:"
              type release_url/release_url.txt
          else
              echo "$RUNNER_OS not supported"
              exit 1
          fi
        shell: bash

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Create env file
        run: echo  "VITE_FIRMWARE_URL=${{ vars.VITE_FIRMWARE_URL }}" > .env

      - name: Build Release Files
        run: npm run build; npm run electron:build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Compress build
        run: |
          if [[ "$RUNNER_OS" == "Linux" || "$RUNNER_OS" == "macOS" ]]; then
            rm -rf ./node_modules
            zip -r -q ./release.zip ./release
          elif [ "$RUNNER_OS" == "Windows" ]; then
            rm -rf ./node_modules
            7z a -r release.zip release
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi
        shell: bash

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: ${{ matrix.os }}.zip
          asset_content_type: application/zip

      - name: Upload release to S3
        uses: hkusu/s3-upload-action@v2
        id: upload-release-s3
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-bucket: ${{ secrets.AWS_BUCKET }}
          file-path: ./release.zip
          bucket-root: /setup
          destination-dir: ${{ env.GitVersion_SemVer }}/${{ matrix.os }}

      - name: Create version file
        run: echo  "${{ env.GitVersion_SemVer }}" > version.txt

      - name: Upload version file to S3
        uses: hkusu/s3-upload-action@v2
        id: upload-version-s3
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-bucket: ${{ secrets.AWS_BUCKET }}
          file-path: 'version.txt'
          bucket-root: /setup
          destination-dir: /
